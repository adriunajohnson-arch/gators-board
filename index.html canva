<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Dismissal Board</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }
        
        .school-green { background-color: #ccd5ae; }
        .school-green-light { background-color: #e9edc9; }
        .school-gold { background-color: #fefae0; }
        .school-gold-dark { background-color: #faedcd; }
        .warm-brown { background-color: #d4a373; }
        
        .bus-enter {
            animation: busEnter 0.5s ease-out;
        }
        
        @keyframes busEnter {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .notification-sound {
            animation: pulse 0.3s ease-in-out 3;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
    </style>
</head>
<body class="min-h-full bg-gray-100">
    <div id="app" class="min-h-full">
        <!-- Navigation -->
        <nav class="school-green text-gray-800 p-4 shadow-lg">
            <div class="max-w-6xl mx-auto flex justify-between items-center">
                <h1 class="text-2xl font-bold">üêä Bus Dismissal Board</h1>
                <div class="space-x-4">
                    <button id="viewerBtn" class="school-gold text-black px-4 py-2 rounded font-semibold hover:school-gold-dark transition-colors">
                        Viewer Mode
                    </button>
                    <button id="adminBtn" class="warm-brown text-white px-4 py-2 rounded font-semibold hover:opacity-90 transition-colors">
                        Admin Mode
                    </button>
                </div>
            </div>
        </nav>

        <!-- Admin Screen -->
        <div id="adminScreen" class="max-w-6xl mx-auto p-6">
            <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
                <h2 class="text-2xl font-bold text-green-800 mb-4">Admin Controls</h2>
                
                <div class="flex gap-4 mb-6">
                    <input 
                        type="text" 
                        id="busNumberInput" 
                        placeholder="Enter bus number..." 
                        class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                    >
                    <button 
                        id="addBusBtn" 
                        class="school-green text-white px-6 py-2 rounded-lg hover:school-green-light transition-colors font-semibold"
                    >
                        Add Bus
                    </button>
                </div>
                
                <div class="border-t pt-4">
                    <h3 class="text-lg font-semibold text-gray-700 mb-3">Current Buses:</h3>
                    <div id="adminBusList" class="space-y-2">
                        <!-- Admin bus list will be populated here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Viewer Screen -->
        <div id="viewerScreen" class="hidden min-h-full">
            <div class="school-green text-gray-800 text-center py-8">
                <h1 class="text-6xl font-bold mb-4">üêä BUSES NOW LOADING</h1>
                <p class="text-2xl">Please listen for your bus number</p>
            </div>
            
            <div id="viewerBusGrid" class="p-8 grid gap-6 auto-rows-fr">
                <!-- Viewer bus grid will be populated here -->
            </div>
            
            <div id="noBusesMessage" class="text-center py-20 text-gray-500 text-2xl hidden">
                No buses currently loading
            </div>
        </div>
    </div>

    <script>
        class BusDismissalBoard {
            constructor() {
                this.buses = [];
                this.currentView = 'admin';
                this.init();
            }
            
            init() {
                this.bindEvents();
                this.updateDisplay();
            }
            
            bindEvents() {
                document.getElementById('adminBtn').addEventListener('click', () => this.switchView('admin'));
                document.getElementById('viewerBtn').addEventListener('click', () => this.switchView('viewer'));
                document.getElementById('addBusBtn').addEventListener('click', () => this.addBus());
                document.getElementById('busNumberInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addBus();
                });
                
                // Update display when window is resized
                window.addEventListener('resize', () => {
                    if (this.currentView === 'viewer') {
                        this.updateViewerGrid();
                    }
                });
            }
            
            switchView(view) {
                this.currentView = view;
                const adminScreen = document.getElementById('adminScreen');
                const viewerScreen = document.getElementById('viewerScreen');
                
                if (view === 'admin') {
                    adminScreen.classList.remove('hidden');
                    viewerScreen.classList.add('hidden');
                    document.getElementById('adminBtn').classList.add('warm-brown', 'text-white');
                    document.getElementById('adminBtn').classList.remove('school-gold', 'text-black');
                    document.getElementById('viewerBtn').classList.add('school-gold', 'text-black');
                    document.getElementById('viewerBtn').classList.remove('warm-brown', 'text-white');
                } else {
                    adminScreen.classList.add('hidden');
                    viewerScreen.classList.remove('hidden');
                    document.getElementById('viewerBtn').classList.add('warm-brown', 'text-white');
                    document.getElementById('viewerBtn').classList.remove('school-gold', 'text-black');
                    document.getElementById('adminBtn').classList.add('school-gold', 'text-black');
                    document.getElementById('adminBtn').classList.remove('warm-brown', 'text-white');
                }
                
                this.updateDisplay();
            }
            
            addBus() {
                const input = document.getElementById('busNumberInput');
                const busNumber = input.value.trim();
                
                if (!busNumber) return;
                
                if (this.buses.find(bus => bus.number === busNumber)) {
                    this.showNotification('Bus number already exists!', 'error');
                    return;
                }
                
                const newBus = {
                    id: Date.now(),
                    number: busNumber,
                    timestamp: new Date()
                };
                
                this.buses.unshift(newBus);
                input.value = '';
                this.playNotificationSound(busNumber);
                this.updateDisplay();
                this.showNotification(`Bus ${busNumber} added!`, 'success');
            }
            
            removeBus(busId) {
                const busIndex = this.buses.findIndex(bus => bus.id === busId);
                if (busIndex > -1) {
                    const busNumber = this.buses[busIndex].number;
                    this.buses.splice(busIndex, 1);
                    this.playSwooshSound();
                    this.updateDisplay();
                    this.showNotification(`Bus ${busNumber} removed!`, 'success');
                }
            }
            
            playNotificationSound(busNumber = null) {
                // Create a longer, more attention-getting alarm sound using Web Audio API
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                // Create a longer sequence of alternating high and low beeps
                for (let i = 0; i < 8; i++) {
                    setTimeout(() => {
                        const oscillator = audioContext.createOscillator();
                        const gainNode = audioContext.createGain();
                        
                        oscillator.connect(gainNode);
                        gainNode.connect(audioContext.destination);
                        
                        // Alternate between high and low frequencies for more annoying effect
                        const frequency = i % 2 === 0 ? 1000 : 600;
                        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                        gainNode.gain.setValueAtTime(0.4, audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                        
                        oscillator.start(audioContext.currentTime);
                        oscillator.stop(audioContext.currentTime + 0.5);
                    }, i * 300);
                }
                
                // After the alarm sound, announce the bus number
                if (busNumber) {
                    setTimeout(() => {
                        this.speakBusNumber(busNumber);
                    }, 2500); // Wait for alarm to finish
                }
            }
            
            speakBusNumber(busNumber) {
                if ('speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance(`Bus number ${busNumber} is now loading`);
                    utterance.rate = 0.8; // Slightly slower for clarity
                    utterance.volume = 0.8;
                    utterance.pitch = 1.0;
                    
                    // Try to use a clear voice if available
                    const voices = speechSynthesis.getVoices();
                    const preferredVoice = voices.find(voice => 
                        voice.lang.startsWith('en') && 
                        (voice.name.includes('Google') || voice.name.includes('Microsoft') || voice.name.includes('Alex'))
                    );
                    if (preferredVoice) {
                        utterance.voice = preferredVoice;
                    }
                    
                    speechSynthesis.speak(utterance);
                }
            }
            
            playSwooshSound() {
                // Create a swoosh sound for bus removal
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                const filterNode = audioContext.createBiquadFilter();
                
                oscillator.connect(filterNode);
                filterNode.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                // Create a swoosh by sweeping frequency downward with noise-like characteristics
                oscillator.type = 'sawtooth';
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.8);
                
                // Add filter sweep for more swoosh effect
                filterNode.type = 'lowpass';
                filterNode.frequency.setValueAtTime(2000, audioContext.currentTime);
                filterNode.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 0.8);
                
                // Volume envelope for swoosh
                gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.8);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.8);
            }
            
            updateDisplay() {
                this.updateAdminList();
                this.updateViewerGrid();
            }
            
            updateAdminList() {
                const adminList = document.getElementById('adminBusList');
                
                if (this.buses.length === 0) {
                    adminList.innerHTML = '<p class="text-gray-500 italic">No buses added yet</p>';
                    return;
                }
                
                adminList.innerHTML = this.buses.map(bus => `
                    <div class="flex items-center justify-between bg-gray-50 p-3 rounded-lg">
                        <div class="flex items-center space-x-3">
                            <span class="text-2xl">üêä</span>
                            <div>
                                <span class="font-semibold text-lg">Bus ${bus.number}</span>
                                <p class="text-sm text-gray-500">Added: ${bus.timestamp.toLocaleTimeString()}</p>
                            </div>
                        </div>
                        <button 
                            onclick="busBoard.removeBus(${bus.id})"
                            class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors font-semibold"
                        >
                            Remove
                        </button>
                    </div>
                `).join('');
            }
            
            updateViewerGrid() {
                const viewerGrid = document.getElementById('viewerBusGrid');
                const noBusesMessage = document.getElementById('noBusesMessage');
                
                if (this.buses.length === 0) {
                    viewerGrid.innerHTML = '';
                    noBusesMessage.classList.remove('hidden');
                    return;
                }
                
                noBusesMessage.classList.add('hidden');
                
                // Calculate optimal grid layout based on screen space
                const busCount = this.buses.length;
                let columns, rows;
                
                if (busCount === 1) {
                    columns = 1; rows = 1;
                } else if (busCount <= 4) {
                    columns = 2; rows = Math.ceil(busCount / 2);
                } else if (busCount <= 9) {
                    columns = 3; rows = Math.ceil(busCount / 3);
                } else if (busCount <= 16) {
                    columns = 4; rows = Math.ceil(busCount / 4);
                } else if (busCount <= 25) {
                    columns = 5; rows = Math.ceil(busCount / 5);
                } else {
                    columns = 6; rows = Math.ceil(busCount / 6);
                }
                
                // Calculate responsive sizing based on available space
                const availableHeight = window.innerHeight - 200; // Account for header
                const availableWidth = window.innerWidth - 64; // Account for padding
                
                const cardHeight = Math.max(120, Math.min(300, availableHeight / rows - 24));
                const cardWidth = Math.max(150, Math.min(250, availableWidth / columns - 24));
                
                // Calculate font sizes based on card size
                const busIconSize = Math.max(2, Math.min(4, cardHeight / 60));
                const busTextSize = Math.max(1.5, Math.min(2.5, cardHeight / 80));
                const busNumberSize = Math.max(2.5, Math.min(4, cardHeight / 50));
                const loadingTextSize = Math.max(0.875, Math.min(1.125, cardHeight / 120));
                
                viewerGrid.className = `p-8 grid gap-6`;
                viewerGrid.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;
                viewerGrid.style.height = `${availableHeight}px`;
                
                viewerGrid.innerHTML = this.buses.map(bus => `
                    <div class="school-gold rounded-xl text-center shadow-2xl bus-enter transform hover:scale-105 transition-transform flex flex-col justify-center items-center border-2 border-opacity-20" 
                         style="min-height: ${cardHeight}px; padding: ${Math.max(8, cardHeight * 0.1)}px; border-color: #d4a373;">
                        <div style="font-size: ${busIconSize}rem; margin-bottom: ${Math.max(4, cardHeight * 0.05)}px;">üêä</div>
                        <div class="font-bold" style="font-size: ${busTextSize}rem; margin-bottom: ${Math.max(2, cardHeight * 0.03)}px; color: #6b7280;">BUS</div>
                        <div class="font-black" style="font-size: ${busNumberSize}rem; line-height: 1; color: #374151;">${bus.number}</div>
                        <div class="font-semibold" style="font-size: ${loadingTextSize}rem; margin-top: ${Math.max(4, cardHeight * 0.05)}px; color: #6b7280;">NOW LOADING</div>
                    </div>
                `).join('');
            }
            
            showNotification(message, type) {
                const notification = document.createElement('div');
                notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white font-semibold z-50 notification-sound ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                }`;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        }
        
        // Initialize the bus dismissal board
        const busBoard = new BusDismissalBoard();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'99112e9250b02abc',t:'MTc2MDg4NjQxMy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
